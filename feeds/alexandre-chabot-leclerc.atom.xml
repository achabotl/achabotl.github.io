<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Shredded Bits - Alexandre Chabot-Leclerc</title><link href="https://alexchabot.net/" rel="alternate"></link><link href="https://alexchabot.net/feeds/alexandre-chabot-leclerc.atom.xml" rel="self"></link><id>https://alexchabot.net/</id><updated>2020-06-06T00:00:00-05:00</updated><entry><title>Custom URL Handler for Zettels with Unique IDs</title><link href="https://alexchabot.net/2020/06/06/custom-url-handler-for-zettels-with-unique-ids/" rel="alternate"></link><published>2020-06-06T00:00:00-05:00</published><updated>2020-06-06T00:00:00-05:00</updated><author><name>Alexandre Chabot-Leclerc</name></author><id>tag:alexchabot.net,2020-06-06:/2020/06/06/custom-url-handler-for-zettels-with-unique-ids/</id><summary type="html"></summary><content type="html">&lt;p&gt;Yesterday I read a &lt;a href="https://forum.zettelkasten.de/discussion/comment/5609/"&gt;series&lt;/a&gt; &lt;a href="https://forum.zettelkasten.de/discussion/1121/open-files-in-any-app-from-the-archive-using-url-schemes"&gt;of&lt;/a&gt; &lt;a href="https://forum.zettelkasten.de/discussion/1152/using-a-custom-url-handler-on-macos-for-any-scripting-purpose"&gt;posts&lt;/a&gt; on custom &lt;span class="caps"&gt;URL&lt;/span&gt; scheme handlers on the &lt;a href="https://forum.zettelkasten.de"&gt;Zettelkasten forums&lt;/a&gt;. The handler registers itself to open links like &lt;code&gt;zettel://202006061337&lt;/code&gt;, where the number is the unique &lt;span class="caps"&gt;ID&lt;/span&gt; of a zettel (here it&amp;#8217;s a timestamp). I&amp;#8217;m not sure everyone realized the magnitude of what that&amp;nbsp;means. &lt;/p&gt;
&lt;p&gt;Combining a custom &lt;span class="caps"&gt;URL&lt;/span&gt; with a unique &lt;span class="caps"&gt;ID&lt;/span&gt; means notes and links can become &lt;em&gt;entirely independent from your apps&lt;/em&gt;. Only the handler needs to know about the apps you&amp;#8217;re&amp;nbsp;using. &lt;/p&gt;
&lt;p&gt;That alone is very nice, but then I thought: URLs can have query parameters… That means I can have URLs like &lt;code&gt;zettel://202006061337&amp;amp;edit&lt;/code&gt; that open in my text editor of choice: &lt;a href="https://macromates.com/"&gt;TextMate&lt;/a&gt;, &lt;a href="https://www.barebones.com/products/bbedit"&gt;BBEdit&lt;/a&gt;, &lt;a href="http://www.hogbaysoftware.com/products/writeroom"&gt;WriteRoom&lt;/a&gt;, &lt;a href="http://www.foldingtext.com/"&gt;FoldingText&lt;/a&gt;, etc. Or &lt;code&gt;zettel://202006061337&amp;amp;preview&lt;/code&gt; to open in &lt;a href="https://marked2app.com/"&gt;Marked&lt;/a&gt;. Or I could even pick the app interactively with &lt;code&gt;zettel://202006061337&amp;amp;pick&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Handling the &lt;span class="caps"&gt;ID&lt;/span&gt; alone is pretty easy since the common Zettelkasten-like apps respond to a &lt;span class="caps"&gt;URL&lt;/span&gt; scheme to search and open files. &lt;a href="https://zettelkasten.de/the-archive/help/#how-do-i-link-to-notes-from-other-apps"&gt;The Archive&lt;/a&gt; uses &lt;code&gt;thearchive://match/ID&lt;/code&gt;, &lt;a href="https://nvultra.com/help/advanced-features#urlhandler"&gt;nvUltra&lt;/a&gt; uses &lt;code&gt;x-nvultra://find/ID&lt;/code&gt;, and &lt;a href="https://brettterpstra.com/2012/02/02/connecting-nvalt-and-address-book/"&gt;nvAlt&lt;/a&gt; uses &lt;code&gt;nvalt://find/ID&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But how to open in a text editor or in Marked given only the &lt;span class="caps"&gt;ID&lt;/span&gt;? With Spotlight. I used &lt;code&gt;mdfind -name ID&lt;/code&gt; to find the file. This could be further refined with the &lt;code&gt;-onlyin FOLDER&lt;/code&gt; option but I didn&amp;#8217;t need it. Then it&amp;#8217;s a matter of calling &lt;code&gt;open -a Marked FILEPATH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s also a &lt;code&gt;zettel://create&lt;/code&gt; special case that will create a new zettel with the current time stamp (&lt;span class="caps"&gt;YYYYMMDDHHMM&lt;/span&gt;). It&amp;#8217;s always done with the default Zettelkasten app because the script doesn&amp;#8217;t know where to write the file but the app&amp;nbsp;does.&lt;/p&gt;
&lt;p&gt;I wrote the handler in Applecript because it&amp;#8217;s the easiest way I know to create something that macOS considers an &amp;#8220;app&amp;#8221; and that can therefore handle&amp;nbsp;URLs. &lt;/p&gt;
&lt;p&gt;The full script is below. To use&amp;nbsp;it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open Script Editor and paste the code below in a new&amp;nbsp;file.&lt;/li&gt;
&lt;li&gt;[Optional] Modify values in the Configuration section to pick a different &lt;span class="caps"&gt;URL&lt;/span&gt; prefix, default Zettelkasten app &lt;span class="caps"&gt;URL&lt;/span&gt;, editor, and previewer. You can add as many apps as you&amp;#8217;d like in the &lt;code&gt;appChoices&lt;/code&gt; array.&lt;/li&gt;
&lt;li&gt;Save as &amp;#8220;Application&amp;#8221;. You can save it anywhere. Make sure &lt;a href="https://apple.stackexchange.com/questions/245772/how-to-get-rid-of-applescript-confirmation"&gt;none of the boxes are checked&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Register the app as a &lt;span class="caps"&gt;URL&lt;/span&gt; handler. You can do it with the &lt;a href="https://github.com/Lord-Kamina/SwiftDefaultApps"&gt;SwiftDefaultApps&lt;/a&gt; Preference pane, or using the instructions provided by Christian Tietze &lt;a href="https://forum.zettelkasten.de/discussion/comment/6133/#Comment_6133"&gt;in the forums&lt;/a&gt;:&lt;ul&gt;
&lt;li&gt;Locate the application file you just&amp;nbsp;created&lt;/li&gt;
&lt;li&gt;Right-click the app, select &amp;#8220;Show Package&amp;nbsp;Contents&amp;#8221;&lt;/li&gt;
&lt;li&gt;Inside, open &lt;code&gt;Contents/Info.plist&lt;/code&gt; &lt;em&gt;with a text&amp;nbsp;editor&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Paste the following in a blank line right below the &lt;code&gt;&amp;lt;dict&amp;gt;&lt;/code&gt; line. Replace &lt;code&gt;zettel&lt;/code&gt; with the &lt;span class="caps"&gt;URL&lt;/span&gt; prefix you&amp;#8217;ve&amp;nbsp;chosen:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLTypes&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLName&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Zettel Link Opener&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLSchemes&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;zettel&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here&amp;#8217;s the full&amp;nbsp;script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;-- Zettel Link Opener&lt;/span&gt;
&lt;span class="c"&gt;-- Created by Alexandre Chabot-Leclerc&lt;/span&gt;
&lt;span class="c"&gt;-- Source: https://alexchabot.net/2020/06/06/custom-url-handler-for-zettels/&lt;/span&gt;
&lt;span class="c"&gt;-- URL Handler for zettelkasten unique IDs, e.g., zettel://202006061017&lt;/span&gt;
&lt;span class="c"&gt;-- Handles options after the ID to open different apps:&lt;/span&gt;
&lt;span class="c"&gt;--    zettel://202006061017&amp;amp;edit to open is a text editor like TextMate&lt;/span&gt;
&lt;span class="c"&gt;--    zettel://202006061017&amp;amp;preview to open in a preview app like Marked&lt;/span&gt;
&lt;span class="c"&gt;--    zettel://202006061017&amp;amp;pick to open a menu of apps to pick from&lt;/span&gt;

&lt;span class="c"&gt;-----------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;-- CONFIGURATION&lt;/span&gt;
&lt;span class="c"&gt;-- URL prefix for your custom URL, e.g. zettel://ZETTEL_ID&lt;/span&gt;
&lt;span class="k"&gt;property&lt;/span&gt; &lt;span class="nv"&gt;urlPrefix&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;zettel&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;-- Default URL to call to open a note with a given ID. The ID will be appended&lt;/span&gt;
&lt;span class="k"&gt;property&lt;/span&gt; &lt;span class="nv"&gt;defaultZkAppUrl&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;thearchive://match/&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;--property defaultZkAppUrl : &amp;quot;nvalt://find/&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;--property defaultZkAppUrl : &amp;quot;x-nvultra://find/&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;-- URL to use to create a new zettle with the current timestamp YYYYMMDDHHMM&lt;/span&gt;
&lt;span class="k"&gt;property&lt;/span&gt; &lt;span class="nv"&gt;urlForCreation&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;thearchive://matchOrCreate/&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;--property urlForCreation : &amp;quot;nvalt://make?txt=&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;--property urlForCreation : &amp;quot;x-nvultra://make?txt=&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;-- Apps to use for the different query parameters&lt;/span&gt;
&lt;span class="k"&gt;property&lt;/span&gt; &lt;span class="nv"&gt;editApp&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;FoldingText&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;-- App to used with &amp;quot;&amp;amp;edit&amp;quot; query parameter&lt;/span&gt;
&lt;span class="k"&gt;property&lt;/span&gt; &lt;span class="nv"&gt;previewApp&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Marked&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;-- App to used with &amp;quot;&amp;amp;preview&amp;quot; query parameter &lt;/span&gt;

&lt;span class="c"&gt;-- List of app to display in the menu with with &amp;amp;pick query option&lt;/span&gt;
&lt;span class="c"&gt;-- The apps will appear in the order defined here&lt;/span&gt;
&lt;span class="k"&gt;property&lt;/span&gt; &lt;span class="nv"&gt;appChoices&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;defaultZkAppUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;editApp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;previewApp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;TextMate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;property&lt;/span&gt; &lt;span class="nv"&gt;defaultApp&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;defaultZkAppUrl&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c"&gt;-----------------------------------------------------------&lt;/span&gt;

&lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;splitText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;theText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;theDelimiter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="no"&gt;AppleScript&lt;/span&gt;&amp;#39;s &lt;span class="no"&gt;text item delimiters&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;theDelimiter&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;theTextItems&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;every&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="nb"&gt;item&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;theText&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="no"&gt;AppleScript&lt;/span&gt;&amp;#39;s &lt;span class="no"&gt;text item delimiters&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="no"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;theTextItems&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nv"&gt;splitText&lt;/span&gt;

&lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;removeUrlPrefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;original&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;-- Remove URL prefix so we&amp;#39;re left with only the ID and the optional query parameter&lt;/span&gt;
    &lt;span class="no"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;do shell script&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;echo &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;quoted form&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;original&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; | sed &amp;#39;s;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;urlPrefix&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;://;;&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nv"&gt;removeUrlPrefix&lt;/span&gt;

&lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;getIdAndOption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;resouceAndQuery&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;-- Split the zettel ID and the optional parameter&lt;/span&gt;
    &lt;span class="c"&gt;-- For example 202006061012&amp;amp;edit or 202006061012&amp;amp;preview&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;theItems&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;splitText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;resouceAndQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;amp;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;length&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;theItems&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="c"&gt;-- Append an empty string if there&amp;#39;s no option so this&lt;/span&gt;
        &lt;span class="c"&gt;-- function always returns an array of 2 elements&lt;/span&gt;
        &lt;span class="nb"&gt;copy&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;the&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;theItems&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;
    &lt;span class="no"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;theItems&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nv"&gt;getIdAndOption&lt;/span&gt;

&lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;findFilepath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;zk_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;-- Finds the filepath using Spotlight.&lt;/span&gt;
    &lt;span class="c"&gt;-- It&amp;#39;s easier than finding the proper filename given only the zettel ID&lt;/span&gt;
    &lt;span class="no"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;do shell script&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mdfind -name &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;zk_id&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nv"&gt;findFilepath&lt;/span&gt;

&lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;createZettel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;newZkId&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;do shell script&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;date +&amp;#39;%Y%m%d%H%M&amp;#39;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;do shell script&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;open &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;urlForCreation&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;newZkId&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nv"&gt;createZettel&lt;/span&gt;

&lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;openInChoosenApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;zkId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;zkFilepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;--  From Simple List Handler by Patrick Welker &amp;lt;http://rocketink.net&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;-- Promp the use for the app to use&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;selectedApp&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;choose from list&lt;/span&gt; &lt;span class="nb"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;appChoices&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Available App&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="na"&gt;prompt&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Which app do you want to use?&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;default&lt;/span&gt; &lt;span class="nb"&gt;items&lt;/span&gt; &lt;span class="nv"&gt;defaultApp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;selectedApp&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="c"&gt;-- Exit prematurly if the user clicked Cancel&lt;/span&gt;
        &lt;span class="k"&gt;error&lt;/span&gt; &lt;span class="nv"&gt;number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;

    &lt;span class="c"&gt;-- Open the URL directly, or open by app name&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;selectedApp&lt;/span&gt; &lt;span class="ow"&gt;contains&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;://&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;do shell script&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;open &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;selectedApp&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;zkId&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nb"&gt;do shell script&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;open -a &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;selectedApp&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;quoted form&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;zkFilepath&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nv"&gt;openInChoosenApp&lt;/span&gt;

&lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nb"&gt;open location&lt;/span&gt; &lt;span class="nv"&gt;thisURL&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;resouceAndQuery&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;removeUrlPrefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thisURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;idAndOption&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;getIdAndOption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;resouceAndQuery&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;zkId&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;item&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;idAndOption&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;zkId&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;create&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nv"&gt;createZettel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="no"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;

    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;zkFilepath&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;findFilepath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;zkId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;item&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;idAndOption&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edit&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;do shell script&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;open -a &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;editApp&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;quoted form&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;zkFilepath&lt;/span&gt;
        &lt;span class="c"&gt;-- Exit the script immediately so we don&amp;#39;t also open in the default app&lt;/span&gt;
        &lt;span class="no"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;item&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;idAndOption&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;preview&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;do shell script&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;open -a &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;previewApp&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;quoted form&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;zkFilepath&lt;/span&gt;
        &lt;span class="c"&gt;-- Exit the script immediately so we don&amp;#39;t also open in the default app(&lt;/span&gt;
        &lt;span class="no"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;item&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;idAndOption&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pick&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nv"&gt;openInChoosenApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;zkId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;zkFilepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="no"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;

    &lt;span class="c"&gt;-- Fall back to the default handler if there was no option&lt;/span&gt;
    &lt;span class="c"&gt;-- or the option was invalid&lt;/span&gt;
    &lt;span class="nb"&gt;do shell script&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;open &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;defaultZkAppUrl&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;zkId&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nb"&gt;open location&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="applescript"></category><category term="zettelkasten"></category></entry><entry><title>What does %matplotlib do in IPython</title><link href="https://alexchabot.net/2020/05/31/what-does-matplotlib-do-in-ipython/" rel="alternate"></link><published>2020-05-31T00:00:00-05:00</published><updated>2020-05-31T00:00:00-05:00</updated><author><name>Alexandre Chabot-Leclerc</name></author><id>tag:alexchabot.net,2020-05-31:/2020/05/31/what-does-matplotlib-do-in-ipython/</id><summary type="html"></summary><content type="html">&lt;p&gt;&lt;em&gt;&lt;span class="caps"&gt;TLDR&lt;/span&gt;; Use &lt;code&gt;%matplotlib&lt;/code&gt; if you want interactive plotting with matplotlib. If you&amp;#8217;re only interested in the &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;#8217;s event loop, &lt;code&gt;%gui &amp;lt;backend&amp;gt;&lt;/code&gt; is&amp;nbsp;sufficient.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I never really understood the difference between &lt;code&gt;%gui&lt;/code&gt; and &lt;code&gt;%matplotlib&lt;/code&gt; in IPython. One of my colleagues at Enthought once told me that at some point in his career, he more or less stopped reading documentation and instead went straight to the code. That&amp;#8217;s what I did here. But let&amp;#8217;s do a bit of history&amp;nbsp;first.&lt;/p&gt;
&lt;p&gt;In the &amp;#8220;beginning&amp;#8221;, there was &lt;code&gt;pylab&lt;/code&gt;. It (still) is a module of matplotlib and was a flag to IPython designed to &lt;a href="https://web.archive.org/web/20130609145008/https://wiki.scipy.org/PyLab"&gt;facilitate the adoption of Python as a numerical computing language&lt;/a&gt; by providing a &lt;span class="caps"&gt;MATLAB&lt;/span&gt;-like syntax.&lt;sup id="fnref-matlab"&gt;&lt;a class="footnote-ref" href="#fn-matlab"&gt;1&lt;/a&gt;&lt;/sup&gt; The reference was so explicit that before being renamed to &lt;code&gt;pylab&lt;/code&gt; on &lt;a href="https://github.com/matplotlib/matplotlib/commit/f210efb0aff44a108239496c877aefe6b7cab2e5"&gt;Dec 9, 2004&lt;/a&gt;, the module was called &lt;code&gt;matplotlib.matlab&lt;/code&gt;. IPython adopted the rename on the &lt;a href="https://github.com/ipython/ipython/commit/6f629fcc23ba63342548f61cc7307eeef4f55799#diff-f26cfac88f7acfeb30807d9a98cff722R616"&gt;same day&lt;/a&gt;.&lt;sup id="fnref-pylab"&gt;&lt;a class="footnote-ref" href="#fn-pylab"&gt;2&lt;/a&gt;&lt;/sup&gt; With the &lt;code&gt;‑‑pylab&lt;/code&gt; flag or the &lt;code&gt;%pylab&lt;/code&gt; magic function, IPython would set up matplotlib for interactive plotting and executed a number of imports from IPython, NumPy and matplotlib. Even thought it helped a few people transition to Python (including myself), it turned out to be a pretty bad idea from a usability point of view. Matthias Bussonnier wrote up a good list of the many things that are wrong with it in &amp;#8220;&lt;a href="https://matthiasbussonnier.com/posts/10-No-PyLab-Thanks.html"&gt;No Pylab Thanks&lt;/a&gt;.&amp;#8221;&lt;/p&gt;
&lt;p&gt;For the 1.0.0 release of IPython in August 2013, all mentions of &lt;code&gt;%pylab&lt;/code&gt; were removed from the examples (in a &lt;a href="https://github.com/ipython/ipython/pull/3683"&gt;July 18, 2013&lt;/a&gt; commit) and were replaced by calls to the &lt;code&gt;%matplotlib&lt;/code&gt; magic function, which only enables interactive plotting but does not perform any imports. The &lt;code&gt;%matplotlib&lt;/code&gt; function had already been introduced in a &lt;a href="https://github.com/ipython/ipython/commit/7ae1fe4225c0c11ccdd6eec758c23aa81ac88654"&gt;2013 refactoring&lt;/a&gt; to separate the interatice plotting from the imports. The &lt;code&gt;%gui&lt;/code&gt; magic command had already been &lt;a href="https://github.com/ipython/ipython/commit/a38045e05d22fee06a56ae884856ed689523ff7b"&gt;introduced&lt;/a&gt; in 2009 by Brian Granger to &amp;#8220;manage the events loops&amp;#8221; (hint&amp;nbsp;hint).&lt;/p&gt;
&lt;p&gt;Now we know that the (my) confusion with &lt;code&gt;%gui&lt;/code&gt; and &lt;code&gt;%matplotlib&lt;/code&gt; started in&amp;nbsp;2013. &lt;/p&gt;
&lt;p&gt;This analysis refers to &lt;a href="https://github.com/ipython/ipython/tree/7.8.0"&gt;IPython 7.8.0&lt;/a&gt; and &lt;a href="https://github.com/ipython/ipykernel/tree/v5.1.2"&gt;ipykernel 5.1.2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our entry point will be the &lt;code&gt;%matplotlib&lt;/code&gt; magic command. Its source code is in the &lt;a href="https://github.com/ipython/ipython/blob/c233c25ab8b724646b9bdc407214c3bb7294683c/IPython/core/magics/pylab.py#L46-L100"&gt;&lt;code&gt;IPython.core.pylab.py&lt;/code&gt;&lt;/a&gt; file. The essential call is to &lt;code&gt;shell.enable_matplotlib(gui)&lt;/code&gt;, which is itself implemented in &lt;a href="https://github.com/ipython/ipython/blob/c233c25ab8b724646b9bdc407214c3bb7294683c/IPython/core/interactiveshell.py#L3380-L3423"&gt;&lt;code&gt;IPython.core.interactiveshell.InteractiveShell&lt;/code&gt;&lt;/a&gt;, and does five&amp;nbsp;things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Select the &amp;#8220;backend&amp;#8221; given the choice of &lt;span class="caps"&gt;GUI&lt;/span&gt; event loop.&lt;/strong&gt; This is done by calling &lt;a href="https://github.com/ipython/ipython/blob/c233c25ab8b724646b9bdc407214c3bb7294683c/IPython/core/pylabtools.py#L259-L299"&gt;&lt;code&gt;IPython.core.pylabtools.find_gui_and_backend(gui)&lt;/code&gt;&lt;/a&gt;. It encapsulates the logic to go
from a &lt;span class="caps"&gt;GUI&lt;/span&gt; name, like &lt;code&gt;"qt5"&lt;/code&gt; or &lt;code&gt;"tk"&lt;/code&gt;, to a backend name, like &lt;code&gt;"Qt5Agg"&lt;/code&gt; and  &lt;code&gt;"TkAgg"&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Activate matplotlib for interactive use&lt;/strong&gt; by calling &lt;a href="https://github.com/ipython/ipython/blob/c233c25ab8b724646b9bdc407214c3bb7294683c/IPython/core/pylabtools.py#L302-L323"&gt;&lt;code&gt;IPython.core.pylabtools.activate_matplotlib(backend)&lt;/code&gt;&lt;/a&gt;, which:&lt;ol&gt;
&lt;li&gt;Activates the interactive mode with &lt;code&gt;matplotlib.interactive(True)&lt;/code&gt;; &lt;/li&gt;
&lt;li&gt;Switches to the  new backend with &lt;code&gt;matplotlib.pyplot.switch_backend(backend)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Replaces the &lt;code&gt;matplotlib.pyplot.draw_if_interactive&lt;/code&gt; method with the same method, but wrapped by a &lt;code&gt;flag_calls&lt;/code&gt; decorator, which adds a &lt;code&gt;called&lt;/code&gt; flag to the method. That flag will be used by the new &lt;code&gt;%run&lt;/code&gt; runner that&amp;#8217;s introduced below at point&amp;nbsp;#5;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Configure inline figure support&lt;/strong&gt; by calling &lt;a href="https://github.com/ipython/ipython/blob/c233c25ab8b724646b9bdc407214c3bb7294683c/IPython/core/pylabtools.py#L359-L415"&gt;&lt;code&gt;IPython.core.pylabtools.configure_inline_support(shell, backend)&lt;/code&gt;&lt;/a&gt;. This is where some very interesting stuff happens. It first checks that &lt;code&gt;InlineBackend&lt;/code&gt; is actually importable from &lt;a href="https://github.com/ipython/ipykernel/blob/v5.1.2/ipykernel/pylab/backend_inline.py"&gt;&lt;code&gt;ipykernel.pylab.backend_inline&lt;/code&gt;&lt;/a&gt;, otherwise it returns immediately. But if it&amp;#8217;s importable and the backend is &lt;code&gt;"inline"&lt;/code&gt;, it:&lt;ol&gt;
&lt;li&gt;Imports the &lt;a href="https://github.com/ipython/ipykernel/blob/ae9ebd0da9cff1b9a5fd6e409c0de44892da9100/ipykernel/pylab/backend_inline.py#L100-L143"&gt;&lt;code&gt;ipykernel.pylab.backend_inline.flush_figures&lt;/code&gt;&lt;/a&gt; function, and register it as a callback for the &lt;code&gt;"post_execute"&lt;/code&gt; event of the shell. As we&amp;#8217;ll see later, callbacks for &lt;code&gt;"post_execute"&lt;/code&gt; are called after executing every&amp;nbsp;cell;&lt;/li&gt;
&lt;li&gt;If the backend was &lt;em&gt;not&lt;/em&gt; &lt;code&gt;"inline"&lt;/code&gt;, it&amp;#8217;ll unregister the &lt;code&gt;flush_figures&lt;/code&gt; callback;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enable the &lt;span class="caps"&gt;GUI&lt;/span&gt; by calling &lt;a href="https://github.com/ipython/ipython/blob/c233c25ab8b724646b9bdc407214c3bb7294683c/IPython/terminal/interactiveshell.py#L515-L521"&gt;&lt;code&gt;shell.enable_gui(gui)&lt;/code&gt;&lt;/a&gt;.&lt;/strong&gt; This method is not implemented in the &lt;code&gt;IPython.core.interactiveshell.InteractiveShell&lt;/code&gt; base class, but rather in &lt;code&gt;IPython.terminal.interactiveshell.TerminalInteractiveShell&lt;/code&gt;. If a &lt;code&gt;gui&lt;/code&gt; as specified, it gets the name of the &lt;code&gt;active_eventloop&lt;/code&gt; and its corresponding &lt;code&gt;inputhook&lt;/code&gt; function using &lt;a href="https://github.com/ipython/ipython/blob/c233c25ab8b724646b9bdc407214c3bb7294683c/IPython/terminal/pt_inputhooks/__init__.py#L33-L49"&gt;&lt;code&gt;IPython.terminal.pt_intputhooks.get_inputhook_name_and_func(gui)&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;active_eventloop&lt;/code&gt; is just a string, such as &lt;code&gt;'qt'&lt;/code&gt;, but the &lt;code&gt;inputhook&lt;/code&gt; is more interesting. It&amp;#8217;s the function to call to start that &lt;span class="caps"&gt;GUI&lt;/span&gt; toolkit&amp;#8217;s event loop. Let&amp;#8217;s dig further into &lt;code&gt;get_inputhook_name_and_func(gui)&lt;/code&gt;. That function checks a few things, but it essentially:&lt;ol&gt;
&lt;li&gt;Imports the correct &lt;code&gt;inputhook&lt;/code&gt; function for the chosen &lt;span class="caps"&gt;GUI&lt;/span&gt; by importing it from &lt;a href="https://github.com/ipython/ipython/tree/7.8.0/IPython/terminal/pt_inputhooks"&gt;&lt;code&gt;IPython.terminal.pt_intputhooks.&amp;lt;gui_mod&amp;gt;&lt;/code&gt;&lt;/a&gt;. For example, the Qt &lt;code&gt;inputhook&lt;/code&gt; is imported from &lt;a href="https://github.com/ipython/ipython/blob/7.8.0/IPython/terminal/pt_inputhooks/qt.py"&gt;&lt;code&gt;IPython.terminal.pt_intputhooks.qt&lt;/code&gt;&lt;/a&gt;.  Later on, when &lt;a href="https://github.com/ipython/ipython/blob/c233c25ab8b724646b9bdc407214c3bb7294683c/IPython/terminal/pt_inputhooks/qt.py#L11-L53"&gt;&lt;code&gt;inputhook&lt;/code&gt; is executed for Qt&lt;/a&gt;, it will:&lt;ol&gt;
&lt;li&gt;Create a &lt;a href="https://doc.qt.io/qt-5/qcoreapplication.html"&gt;&lt;code&gt;QCoreApplication&lt;/code&gt;&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Create a &lt;a href="https://doc.qt.io/qt-5/qeventloop.html"&gt;&lt;code&gt;QEventLoop&lt;/code&gt;&lt;/a&gt; for that&amp;nbsp;application;&lt;/li&gt;
&lt;li&gt;Execute the event loop and register the right events to make sure the loop is shut down properly. The exact operations to start and stop the loop are slightly different for other &lt;span class="caps"&gt;GUI&lt;/span&gt; toolkits, like &lt;code&gt;tk&lt;/code&gt;, &lt;code&gt;wx&lt;/code&gt;, or &lt;code&gt;osx&lt;/code&gt;,  but they all essentially do the same thing. At this point we&amp;#8217;re ready to go back up the stack to &lt;code&gt;enable_matplotlib&lt;/code&gt; in &lt;code&gt;%matplotlib&lt;/code&gt;;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Replace IPython&amp;#8217;s &lt;code&gt;default_runner&lt;/code&gt; with the one defined in &lt;a href="https://github.com/ipython/ipython/blob/c233c25ab8b724646b9bdc407214c3bb7294683c/IPython/core/pylabtools.py#L145-L192"&gt;&lt;code&gt;IPython.core.pylabtools.mpl_runner&lt;/code&gt;&lt;/a&gt;.&lt;/strong&gt; The &lt;code&gt;default_runner&lt;/code&gt; is the function that executes code when using the &lt;code&gt;%run&lt;/code&gt; magic. The &lt;code&gt;mpl_runner&lt;/code&gt;:&lt;ol&gt;
&lt;li&gt;Saves the &lt;code&gt;matplotlib.interactive&lt;/code&gt; state, and disables&amp;nbsp;it;&lt;/li&gt;
&lt;li&gt;Executes the&amp;nbsp;file;&lt;/li&gt;
&lt;li&gt;Restores the &lt;code&gt;interactive&lt;/code&gt; state;&lt;/li&gt;
&lt;li&gt;Makes the rendering call, if the user asked for it, by checking the &lt;code&gt;plt.draw_if_interactive.called&lt;/code&gt; flag that was introduced at point #1.3&amp;nbsp;above.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As for the other magic, &lt;a href="https://github.com/ipython/ipython/blob/c233c25ab8b724646b9bdc407214c3bb7294683c/IPython/core/magics/basic.py#L468-L501"&gt;&lt;code&gt;%gui&lt;/code&gt;&lt;/a&gt;, it only executes a subset of what &lt;code&gt;%matplotlib&lt;/code&gt; does. It only calls &lt;code&gt;shell.enable_gui(gui)&lt;/code&gt;, which is point #4 above. This means that if your application requires interaction with a &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;#8217;s event loop, but doesn&amp;#8217;t require matplotlib, then it&amp;#8217;s sufficient to use &lt;code&gt;%gui&lt;/code&gt;. For example, if you&amp;#8217;re writing applications using &lt;a href="https://docs.enthought.com/traitsui/"&gt;TraitsUI&lt;/a&gt; or &lt;a href="https://riverbankcomputing.com/software/pyqt/intro/"&gt;PyQt&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The Effect of Calling &lt;code&gt;%gui&lt;/code&gt; and &lt;code&gt;%matplotlib&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s start with the &amp;#8220;simplest&amp;#8221; one, &lt;code&gt;%gui&lt;/code&gt;. If you execute it in a fresh IPython session, it&amp;#8217;ll only start the event loop. On macOS, the obvious effect of this is to start the Rocket&amp;nbsp;icon.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation of the Python rocket icon starting because of a call to %gui." src="images/2020-05-31-ipython-gui.gif"&gt;&lt;/p&gt;
&lt;p&gt;At that point, if you import matplotlib and call &lt;code&gt;plt.plot()&lt;/code&gt;, no figure will appear unless you either call &lt;code&gt;plt.show()&lt;/code&gt; afterwards, or manually enable interactive mode with &lt;code&gt;plt.interactive(True)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On the other hand, if you start your session by calling &lt;code&gt;%matplotlib&lt;/code&gt;, it&amp;#8217;ll start the Rocket &lt;em&gt;and&lt;/em&gt; activate matplotlib&amp;#8217;s interactive mode. This way, if you call &lt;code&gt;plt.plot()&lt;/code&gt;, your figure will show up immediately and your session will not be&amp;nbsp;blocked.&lt;/p&gt;
&lt;h2&gt;Using &lt;code&gt;%run&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;If you call &lt;code&gt;%run my_script.py&lt;/code&gt;  &lt;em&gt;after&lt;/em&gt; calling &lt;code&gt;%matplotlib&lt;/code&gt;, &lt;code&gt;my_script.py&lt;/code&gt; will be executed with the &lt;a href="https://github.com/ipython/ipython/blob/c233c25ab8b724646b9bdc407214c3bb7294683c/IPython/core/pylabtools.py#L145-L192"&gt;&lt;code&gt;mpl_runner&lt;/code&gt;&lt;/a&gt; introduced above at point&amp;nbsp;#5.&lt;/p&gt;
&lt;h2&gt;Executing a Jupyter Notebok Cell When Using the &lt;code&gt;"inline"&lt;/code&gt; Backend&lt;/h2&gt;
&lt;p&gt;In the terminal the &lt;a href="https://github.com/ipython/ipython/blob/c233c25ab8b724646b9bdc407214c3bb7294683c/IPython/terminal/interactiveshell.py#L471-L489"&gt;&lt;code&gt;IPython.terminal.interactiveshell.TerminalInteractiveShell.interact()&lt;/code&gt;&lt;/a&gt; method is where all the fun stuff happens. It prompts you for code, checks if you want to exit, and then executes the cell with &lt;a href="https://github.com/ipython/ipython/blob/c233c25ab8b724646b9bdc407214c3bb7294683c/IPython/core/interactiveshell.py#L2828-L2860"&gt;&lt;code&gt;InteractiveShell.run_cell(code)&lt;/code&gt;&lt;/a&gt; and &lt;em&gt;then&lt;/em&gt; trigger the &lt;code&gt;"post_execute"&lt;/code&gt; event for which we&amp;#8217;ve registered the &lt;code&gt;ipykernel.pylab.backend_inline.flush_figures&lt;/code&gt; callback. As you might have noticed, the &lt;code&gt;flush_figures&lt;/code&gt; function comes from ipykernel, and not from IPython. It tries to return all the figures produced by the cell as &lt;span class="caps"&gt;PNG&lt;/span&gt; of &lt;span class="caps"&gt;SVG&lt;/span&gt;, displays them on screen using IPython&amp;#8217;s &lt;a href="https://github.com/ipython/ipython/blob/c233c25ab8b724646b9bdc407214c3bb7294683c/IPython/core/display.py#L131-L315"&gt;&lt;code&gt;display&lt;/code&gt;&lt;/a&gt; function, and then closes all the figures, so matplotlib doesn&amp;#8217;t end up littered will all the figures we&amp;#8217;ve ever&amp;nbsp;plotted.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;To sum it up, use &lt;code&gt;%matplotlib&lt;/code&gt; if you want interactive plotting with matplotlib. If you&amp;#8217;re only interested in the &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;#8217;s event loop, &lt;code&gt;%gui &amp;lt;backend&amp;gt;&lt;/code&gt; is sufficient._ Although as far as I understand, there&amp;#8217;s nothing very wrong with using &lt;code&gt;%matplotlib&lt;/code&gt; all the&amp;nbsp;time.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-matlab"&gt;
&lt;p&gt;Basically, no namespaces, and direct access to functions like &lt;code&gt;plot&lt;/code&gt;, &lt;code&gt;figure&lt;/code&gt;, &lt;code&gt;subplot&lt;/code&gt;, etc.&amp;#160;&lt;a class="footnote-backref" href="#fnref-matlab" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-pylab"&gt;
&lt;p&gt;The earliest commit I found for the IPyhon project was on July 6, 2005 by Fernando Perez, 7 months after the name change. Its Git hash is &lt;a href="https://github.com/ipython/ipython/commit/6f629fcc23ba63342548f61cc7307eeef4f55799"&gt;6f629fcc23ba63342548f61cc7307eeef4f55799&lt;/a&gt;. But the earliest mention is an &lt;a href="https://github.com/ipython/ipython/commit/6f629fcc23ba63342548f61cc7307eeef4f55799#diff-f26cfac88f7acfeb30807d9a98cff722R955"&gt;August 2004 entry in the ChangeLog&lt;/a&gt;: &amp;#8220;ipythonrc-pylab: Add matplotlib support,&amp;#8221; which is &lt;em&gt;before&lt;/em&gt; the offical rename in matplotlib.&amp;#160;&lt;a class="footnote-backref" href="#fnref-pylab" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content></entry><entry><title>Manually Merging Day One Journals</title><link href="https://alexchabot.net/2018/07/14/manually-merging-day-one-journals/" rel="alternate"></link><published>2018-07-14T00:00:00-05:00</published><updated>2018-07-14T00:00:00-05:00</updated><author><name>Alexandre Chabot-Leclerc</name></author><id>tag:alexchabot.net,2018-07-14:/2018/07/14/manually-merging-day-one-journals/</id><summary type="html"></summary><content type="html">&lt;p&gt;My first Day One entry is from January 24, 2012. I used it often to take
note about what I was doing during my PhD with the &lt;code&gt;#wwid&lt;/code&gt; tag (what was I
doing, an idea from &lt;a href="http://brettterpstra.com/"&gt;Brett Terpstra&lt;/a&gt;, I think), and
sometimes to clarify some&amp;nbsp;thoughts.&lt;/p&gt;
&lt;p&gt;When Day One went The Way of the Subscription, I didn&amp;#8217;t bother too much
because Dropbox sync still worked. Until it didn&amp;#8217;t. I somehow didn&amp;#8217;t realized
it and kept adding entries to both the iOS &lt;em&gt;and&lt;/em&gt; the macOS versions. Not
good. It&amp;#8217;s been on my to do list for a while to find a way to merge the two
journals. I could probably subscribe to the Day One sync service and have it
figure out the merging but I didn&amp;#8217;t want to subscribe just for&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;I learned somewhere that Day One 2 could export journals as a folder of photos
and a &lt;span class="caps"&gt;JSON&lt;/span&gt; file. I figure I could probably write a script to do the merging.
So I downloaded Day One 2 on my iPhone and Mac, imported my Day One Classic
journals, exported them as &lt;span class="caps"&gt;JSON&lt;/span&gt; to a folder on my Mac, and unzipped them. I
also created a &lt;code&gt;merged/&lt;/code&gt; folder where to put the merged journal. The hierarchy
looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tree -L &lt;span class="m"&gt;2&lt;/span&gt;
.
├── Journal-JSON-ios/
│   ├── Journal.json
│   └── photos/
├── Journal-JSON-ios.zip
├── Journal-JSON-mac/
│   ├── Journal.json
│   └── photos/
├── Journal-JSON-mac.zip
├── merge_journals.py
└── merged/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I first copied the photo folder from &lt;code&gt;Journal-JSON-ios/&lt;/code&gt; to &lt;code&gt;merged/&lt;/code&gt;
and the photos from &lt;code&gt;Journal-JSON-mac/photos/&lt;/code&gt;. I was pretty confident
that I would end up with the union of all the photos because Day One uses
&lt;a href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;UUIDs&lt;/a&gt; to
identify each photo. The &lt;code&gt;-n&lt;/code&gt; option to &lt;code&gt;cp&lt;/code&gt; prevents overwriting&amp;nbsp;files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cp -r Journal-JSON-ios/photos merged/
$ cp -n Journal-JSON-mac/photos merged/photos/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I then ran the &lt;code&gt;merge_journals.py&lt;/code&gt; script (below) to do a similar merge of the
entries, based on the UUIDs. The merging happens by building a dictionary with
&lt;span class="caps"&gt;UUID&lt;/span&gt; of each entry as the key and the entry itself as the value. It&amp;#8217;s two
loops over the iOS and the macOS entries. Entries with the same &lt;span class="caps"&gt;UUID&lt;/span&gt; should
have the same contents, unless I&amp;#8217;ve edited some metadata on one platform but
not the other. I&amp;#8217;m not too worried about&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;The output dictionary will be written to the &lt;code&gt;Journal.json&lt;/code&gt; file. The entries
are sorted chronologically because that&amp;#8217;s how it was in the exported journal
files, but I doubt it&amp;nbsp;matters.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;output&lt;/code&gt; dictionary is written to disk without enforcing the conversion to
&lt;span class="caps"&gt;ASCII&lt;/span&gt; since the exported journals are encoded using &lt;span class="caps"&gt;UTF&lt;/span&gt;-8. The indent is there
to make the output more readable and diff-able with the exported&amp;nbsp;journals.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./Journal-JSON-ios/Journal.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./Journal-JSON-mac/Journal.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mac&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Extract and merge UUIDs&lt;/span&gt;
&lt;span class="n"&gt;uniques&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uuid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ios&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;entries&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mac&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;entries&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;uniques&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uuid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;

&lt;span class="c1"&gt;# Create the output JSON data structure&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;metadata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mac&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;metadata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;entries&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uniques&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;# I&amp;#39;m not sure it matters, but Day One usually exports the entries&lt;/span&gt;
&lt;span class="c1"&gt;# in chronological order&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;entries&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;creationDate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# ensure_ascii print unicode characters as-is.&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;merged/Journal.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ensure_ascii&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last step is to zip the journal and photos together, which tripped me up
a few times. The &lt;code&gt;Journal.json&lt;/code&gt; and the &lt;code&gt;photos/&lt;/code&gt; folder must be at the top
level of the archive, so I zip the file from within the &lt;code&gt;merged/&lt;/code&gt; folder and
then move it back up one&amp;nbsp;level.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; merged
$ zip -r merged.zip *
$ mv merged.zip ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I could then import &lt;code&gt;merged.zip&lt;/code&gt; in Day One, which created a new Journal, and
delete the old&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;I guess I could somewhat automate this to roll my own, &lt;span class="caps"&gt;DIY&lt;/span&gt;, sync between
versions of Day One, but I&amp;#8217;d rather pay them money once I decide to use Day
One frequently again. Still, I really appreciate that the Day One developers
picked formats that could be manipulated so&amp;nbsp;easily.&lt;/p&gt;</content><category term="python"></category></entry></feed>